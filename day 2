CODE :--
for(i=0;i<n;i++).....n+1 times
{
for(j=0;j<n;j++).....n*(n+1)
{
statements:n*n.......n square
}
};
time complexity=O(n square)


Implement a 2d array and rotate the matrix 90degree 

  
 assignment:

what is stack and heep memory, 



* for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
statements
}
};

i=o
j=nthng

i=1
j=0 will execute

i=2
j=0,1 will execute stop at 2


p=0
for(i=1;p<=n;i++)
{
p=p+i;
}

1.0+1 bcs p=p+i..when N is 0
2.1+2 = 3......N is 1

.
.
.
.k 1+2+...k

not n times assuming
whwn wil stop whn P>n
p=k(k+1)/2 bcs 1+2+...k
p=k square>n
so n=sqaure of n
time complexity) O(square t(n))


For(i=1;i<n;i*2)
{
statements;
}

analysis:

i=1  1 time
i=2  2 times (i*2)
i=3  4 times (i*2)2
i=4  8 times (i*2)2*)*2

so when stopes i>=n
   i=2 power k
   2 power k>=n
   k=log n base 2
so time complexity O(log n base 2)


* create an dyanmic 1d array it conatains numbers between 1o to 30
 1.exact and print even num
2.2 power value


DERIVED FORMULAE:

for(i=0;i<n;i++)...O(n)
for(i=0;i<n;i+2)...O(n)
for(i=n;i>n;i--)...O(n)

for(i=n;i<n;i=i*2)....O(log n base 2)
for((i=n;i<n;i=i*3)...O(log n base 3)
for(i=n;i<n;i=i/2)....O(log n base 2)

--> constant time complexity.......O(1)
--> linear time complexity.........O(n)
--> logarithmic time complexity....O(log n)
--> quadractic time complexity.....O(n^2)
--> exponential time complexity....O(2^n)


FINIAL SUMMARY:

--> i++ i-- i+2           O(n)
--> i*2 i/2               log(n) base 2
--> p=0
--> for p<n i++
--> p=p+i
-->Â O(sqrt(n)





