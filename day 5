PROGRAM:
#include <stdio.h>
void rotateClockwise(int matrix[3][3]) {
    int temp[3][3];

    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            temp[i][j] = matrix[2 - j][i];
        }
    }
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            matrix[i][j] = temp[i][j];
        }
    }
}
void rotateAntiClockwise(int matrix[3][3]) {
    int temp[3][3];
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            temp[i][j] = matrix[j][2 - i];
        }
    }
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            matrix[i][j] = temp[i][j];
        }
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------
  PROGRAM:
int main() {
    int matrix[3][3] = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
    };
    printf("Original Matrix:\n");
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
    rotateClockwise(matrix);
    printf("\nClockwise Rotated Matrix:\n");
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
    rotateAntiClockwise(matrix);
    printf("\nAntiClockwise Rotated Matrix:\n");
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }

    return 0;
}
----------------------------------------------------------------------------------------------------------------------------------------------------
PROGRAM:
def is_magic_square(matrix):
    # Check sum of rows, columns, and diagonals
    target_sum = 15
    for i in range(3):
        row_sum = sum(matrix[i])
        col_sum = sum(matrix[j][i] for j in range(3))
        if row_sum != target_sum or col_sum != target_sum:
            return False

    diagonal1_sum = sum(matrix[i][i] for i in range(3))
    diagonal2_sum = sum(matrix[i][2 - i] for i in range(3))

    return diagonal1_sum == target_sum and diagonal2_sum == target_sum

def generate_magic_square():
    # Try all permutations of the numbers 1 to 9
    from itertools import permutations

    for perm in permutations(range(1, 10)):
        matrix = [list(perm[i:i+3]) for i in range(0, 9, 3)]
        if is_magic_square(matrix):
            return matrix

# Generate and print the magic square
magic_square = generate_magic_square()
for row in magic_square:
    print(row)
0
-----------------------------------------------------------------------------------------------------------------------------------
PROGRAM:
# Define the 3x3 grid
grid = [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]

# Function to check if a list of numbers sums to 15
def is_sum_15(arr):
    return sum(arr) == 15

# Generate all permutations of the numbers 1 to 9
permutations = itertools.permutations(range(1, 10))

# Function to check if a grid satisfies the conditions
def is_valid(grid):
    # Check rows
    for row in grid:
        if not is_sum_15(row):
            return False
    
    # Check columns
    for j in range(3):
        if not is_sum_15([grid[i][j] for i in range(3)]):
            return False
    
    # Check diagonals
    if not is_sum_15([grid[i][i] for i in range(3)]) or not is_sum_15([grid[i][2-i] for i in range(3)]):
        return False
    
    return True

# Find and print valid grids
for perm in permutations:
    grid[0][0], grid[0][1], grid[0][2] = perm[0], perm[1], perm[2]
    grid[1][0], grid[1][1], grid[1][2] = perm[3], perm[4], perm[5]
    grid[2][0], grid[2][1], grid[2][2] = perm[6], perm[7], perm[8]
    
    if is_valid(grid):
        for row in grid:
            print(row)
        print()
