def three_pointer(nums, target):
    for i in range(len(nums) - 2):
        left, right = i + 1, len(nums) - 1

        while left < right:
            current_sum = nums[i] + nums[left] + nums[right]

            if current_sum == target:
                return sorted([nums[i], nums[left], nums[right]])
            elif current_sum < target:
                left += 1
            else:
                right -= 1

    return None

# Sample Input
nums = [1, 2, 3, 4, 5]
target = 12

# Find the triplet and print the sorted output
result = three_pointer(nums, target)
if result:
    print(*result)
else:
    print(None)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def binary_search_ceil(arr, target):
    left, right = 0, len(arr) - 1
    ceil_index = -1

    while left <= right:
        mid = left + (right - left) // 2

        if arr[mid] == target:
            return mid, mid

        if arr[mid] < target:
            left = mid + 1
        else:
            ceil_index = mid
            right = mid - 1

    return ceil_index, -1

def binary_search_floor(arr, target):
    left, right = 0, len(arr) - 1
    floor_index = -1

    while left <= right:
        mid = left + (right - left) // 2

        if arr[mid] == target:
            return mid, mid

        if arr[mid] < target:
            floor_index = mid
            left = mid + 1
        else:
            right = mid - 1

    return -1, floor_index

# Sample Input
arr = [2, 5, 8, 12, 16]
target = 10

# Get ceil and floor indices
ceil_index, floor_index = binary_search_ceil(arr, target), binary_search_floor(arr, target)

# Format the output
output = (ceil_index[0], floor_index[0] + 1)
print(output)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def count_sort(lst):
    s=len(lst)
    count_arr=[0]*s
    result_arr=[0]*s
    for i in range(s):
        count_arr[lst[i]]+=1
    for i in range(1,s):
        count_arr[i]+=count_arr[i-1]
    n=s-1
    while n>=0:
        result_arr[count_arr[lst[n]]-1]=lst[n]
        count_arr[lst[n]]-=1
        n-=1
    for i in range(0,s):
        lst[i]=result_arr[i]
lst=list(map(int,input().split()))
count_sort(lst)
for i in range(0,len(lst)):
    print(lst[i],end=' ')
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def main():
    _str="madammadam"
    #a=input()
    n=len(_str)
    dp=[[0 for i in range(n)]for j in range(n)*n]*n
    i,j=0,0
    count=0
    while j<n:
        
        jflag=j
        while jflag<n:
            if i==jflag:
                dp[i][jflag]=1
            if abs(i-jflag)==2:
                if _str[i]==_str[jflag]:
                        dp[i][jflag]=1
                        count+=1
                    else:
                        dp[i][jflag]=0
            else:
                if _str[i]==_str[jflag]:
                    if i+1<n and dp[i+1][jflag-1]==1:
                        
                        dp[i][jflag]=1
                        count+=1
                        
                    else:
                        dp[i][jflag]=0
                else:
                    dp[i][jflag]=0
            i+=1
            jflag+=1
        j+=1
        i=0
    print(dp)
    return count
print(main())
-------------------------------------------------------------------------------------------------------------------------------
