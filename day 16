my_map = {}
my_map["key"] = "this is  value"
my_map[0] = "ZERO"
my_map[1.3] = "ONE.THREE"
print(my_map)
try:
    print(my_map[10])
except:
    print("key does not exists")
    #print(my_map[1.3])

NUMBER OF COUNT DIGIT IS ONE:==
def countDigitOne(n):
    count = 0
    i = 1
    while i <= n:
        divider = i * 10
        count += (n // divider) * i + min(max(n % divider - i + 1, 0), i)
        i *= 10
    return count

Product of Array Except Self:=

def productExceptSelf(nums):
    n = len(nums)
    left_products = [1] * n
    right_products = [1] * n
    left_product = 1
    for i in range(n):
        left_products[i] = left_product
        left_product *= nums[i]
    right_product = 1
    for i in range(n - 1, -1, -1):
        right_products[i] = right_product
        right_product *= nums[i]
    answer = [left_products[i] * right_products[i] for i in range(n)]
    return answer
nums1 = [1, 2, 3, 4]
output1 = productExceptSelf(nums1)
print(output1)  
nums2 = [-1, 1, 0, -3, 3]
output2 = productExceptSelf(nums2)
print(output2) 

*****************
vertices = 7
graph = [[[]] for i in range(vertices)]
graph[0] = [[0,1,3],[0,4,2]]
graph[1] = [[1,0,3],[1,3,10],[1,7,5]]
def has_path(graph, src, des, visited):
    if src == des:
        return True
    for neighbour in graph[src]:
        print(neighbour)
        if visited[src] == False:
            visited[src] = True
            result = has_path(graph,neighbour[1],des)
            if result == True:
                return True
    return False
print(has_path(graph,3,4,visited))


        


